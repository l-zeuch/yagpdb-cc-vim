# Test file: Indentation

# Copyright (C) 2023    Lucas Ritzdorf, Luca Zeuch

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Language: YAGPDB Custom Commands
# Maintainer: Luca Zeuch <l-zeuch@email.de>,
#   LRitzdorf <42657792+LRitzdorf@users.noreply.github.com>

# Available syntax functions are:
#   SyntaxAt(): current cursor position
#   SyntaxAt(col): current cursor line, at given column
#   SyntaxAt(lnum, col): line and column
#   SyntaxOf(pattern[, nth=1]): return a string with the name of the syntax
#     group at the first character of the nth match of the given pattern. Return
#     '' if there was no match.

Before:
  source ../indent/yagpdbcc.vim

After:
  Restore

Given (Unindented Code):
  {{ if true }}
  {{ print "hello" }}
  {{ else }}
  {{ print "bye" }}
  {{ end }}

Do (apply indents):
  gg=G

Expect (Indented in if/else block):
  {{ if true }}
    {{ print "hello" }}
  {{ else }}
    {{ print "bye" }}
  {{ end }}

Given (Code with a few too many indents):
  {{ if false }}
          {{/* do stuff */}}
          {{ template "my_template" }}
          {{ return }}
        {{ else }}
    {{ sendMessage nil "something broke :(" }}
    {{ dbSet 2000 "key" "value" }}
      {{ end }}

Do (apply indents):
  gg=G

Expect (Flattened Indents):
  {{ if false }}
    {{/* do stuff */}}
    {{ template "my_template" }}
    {{ return }}
  {{ else }}
    {{ sendMessage nil "something broke :(" }}
    {{ dbSet 2000 "key" "value" }}
  {{ end }}

Given (code with raw strings):
  {{ if $something }}
  do stuff
  {{/* hello */}}
  {{ $r := `
  eeee
  e
  e
  e
  e
  e
  e
  `}}
  {{ else }}
  {{ if yes }}
  epic
  {{ else }}
  also epic
  {{ end }}
  {{ end }}
  {{ range }}
  k
  {{ end }}

Do (apply indents):
  gg=G

Expect (Indentation that does not change raw strings):
  {{ if $something }}
    do stuff
    {{/* hello */}}
    {{ $r := `
    eeee
    e
    e
    e
    e
    e
    e
    `}}
  {{ else }}
    {{ if yes }}
      epic
    {{ else }}
      also epic
    {{ end }}
  {{ end }}
  {{ range }}
    k
  {{ end }}

Given (Code with multiple nested blocks and no indentation):
  {{ try }}
  {{ sendmessage 12345 "this might fail" }}
  {{ catch }}
  {{ sendmessage nil "stuff failed :/" }}
  {{ end }}
  {{ define "my_stuff" }}
  {{ range $some_slice }}
  {{ if eq . $something_else }}
  {{ return }}
  {{ else }}
  {{ while true }}
  {{ return }}
  {{ end }}
  {{ end }}
  {{ end }}
  {{ end }}

Do (apply indents):
  gg=G

Expect (Clear structure with indentation):
  {{ try }}
    {{ sendmessage 12345 "this might fail" }}
  {{ catch }}
    {{ sendmessage nil "stuff failed :/" }}
  {{ end }}
  {{ define "my_stuff" }}
    {{ range $some_slice }}
      {{ if eq . $something_else }}
        {{ return }}
      {{ else }}
        {{ while true }}
          {{ return }}
        {{ end }}
      {{ end }}
    {{ end }}
  {{ end }}
